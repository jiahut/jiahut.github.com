<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jazz's blog]]></title>
  <link href="http://jiahut.github.com/atom.xml" rel="self"/>
  <link href="http://jiahut.github.com/"/>
  <updated>2013-03-03T14:05:37+08:00</updated>
  <id>http://jiahut.github.com/</id>
  <author>
    <name><![CDATA[zhijia,.zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascript core]]></title>
    <link href="http://jiahut.github.com/blog/2013/03/03/javascript-core/"/>
    <updated>2013-03-03T13:27:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2013/03/03/javascript-core</id>
    <content type="html"><![CDATA[<h3>javascript核心</h3>

<ol>
<li>两个作用域

<ul>
<li>全局作用域</li>
<li>闭包作用域

<blockquote><p>for(var i = 1;i &lt; 100;i++); i逃逸到全局作用域中<br/>
console.log(i); //100</p></blockquote></li>
</ul>
</li>
<li>两条原型链

<ul>
<li><em>function</em>.prototype</li>
<li><em>object</em>.constructor</li>
</ul>
</li>
<li>两个上下文

<ul>
<li>定义上下文</li>
<li>执行上下文</li>
</ul>


<p> &#8220;`js</p>

<pre><code> (function(){
     var callbacks = [];
     for(var i = 1;i &lt; 100;i++){
         callbacks.push(function(){
             console.log(i)
         });
     }
     callbacks.forEach(function(e){
         e.apply()
     });
 })()
</code></pre>

<p> &#8220;`</p></li>
<li>两套类型系统

<ul>
<li>基本类型系统空的概念用 undefined 表示</li>
<li>对象类型系统空的概念用 null 表示

<blockquote><p>var str = &#8220;&#8221;<br/>
typeof str === &#8216;string&#8217; //true<br/>
str instanceof String // false</p></blockquote></li>
</ul>
</li>
<li>两个核心概念

<ul>
<li><p>闭包就是携带部分上下文的函数对象</p>

<ul>
<li>内部函数中的变量优先在闭包中执行变量查找，然后上一次&#8230;</li>
</ul>
</li>
<li><p>上下文对象就是函数执行的环境</p>

<ul>
<li>当前上下文为this</li>
<li>浏览器全局上下文为windows</li>
<li>nodejs全局上下文为global</li>
</ul>
</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python module vs. package]]></title>
    <link href="http://jiahut.github.com/blog/2012/10/28/python-module-vs-package/"/>
    <updated>2012-10-28T10:47:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2012/10/28/python-module-vs-package</id>
    <content type="html"><![CDATA[<h2>模块 vs. 包</h2>

<ol>
<li>一个.py文件就是一个模块，但是一个模块未必就对应一个.py文件

<ol>
<li>in lib/os.py it injects &#8220;sys.modules[&#8216;os.path&#8217;] = path&#8221; so that you&#8217;re able to do &#8220;import os.path&#8221; as though it was a submodule.</li>
<li>sys.modules is a dict in which modules are cached. When you import a module, if it already has been imported somewhere, it gets the instance stored in sys.modules.</li>
</ol>
</li>
<li>包就是一个文件夹下放一个 &#8220;_<em>init_</em>.py&#8221;

<ol>
<li>The _init.py files are required to make Python treat the directories as containing packages.</li>
<li>_<em>init_</em>.py can just be an empty file, but it can also execute initialization code for the package or set the _<em>all_</em> variable</li>
<li>多级package _<em>init_</em>.py从顶至底依次被执行</li>
</ol>
</li>
<li>import用于导入包或模块

<ol>
<li>A module&#8217;s body executes immediately the first time the module is imported in a given run of a program</li>
<li>An import statement creates a new namespace containing all the attributes of the module</li>
</ol>
</li>
</ol>


<h2>获取帮助</h2>

<ol>
<li>dir(object) => 列出object的方法</li>
<li>help(object) => 列出object的文档<br/>
*object 可以是模块,类 或者 函数对象。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkDown:Syntax]]></title>
    <link href="http://jiahut.github.com/blog/2012/09/21/markdown-syntax/"/>
    <updated>2012-09-21T21:59:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2012/09/21/markdown-syntax</id>
    <content type="html"><![CDATA[<h3>记录一下Markdown的语法要点</h3>

<p>============================</p>

<ul>
<li><p>MD的语法全部由标点符号所组成,一般语法格式为标点符号加至少一个空格或tab</p></li>
<li><p>MD设计用于网络写作语言</p></li>
<li><p>不在Markdown涵盖范围之外的标签，都可以直接在文件里面用HTML撰写
只有<strong>区块元素</strong>──比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>标签，必需在前后加上空白
HTML的<strong>区段标签</strong>如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>则不受限制</p></li>
<li><p>Markdown语法在HTML<strong>区块标签</strong>中将不会被进行处理</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[just test]]></title>
    <link href="http://jiahut.github.com/blog/2012/09/20/just-test/"/>
    <updated>2012-09-20T23:09:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2012/09/20/just-test</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
