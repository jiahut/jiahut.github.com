<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jazz's blog]]></title>
  <link href="http://jiahut.github.com/atom.xml" rel="self"/>
  <link href="http://jiahut.github.com/"/>
  <updated>2013-05-07T21:41:45+08:00</updated>
  <id>http://jiahut.github.com/</id>
  <author>
    <name><![CDATA[zhijia,.zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jsonp api demo in java]]></title>
    <link href="http://jiahut.github.com/blog/2013/05/07/jsonp-api-demo-in-java/"/>
    <updated>2013-05-07T21:16:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2013/05/07/jsonp-api-demo-in-java</id>
    <content type="html"><![CDATA[<h1>  Java平台的JSON处理的API的展示</h1>

<ol>
<li><p>JSON是一种轻量级数据交换格式,rails4的 <code>respond_to do |format|</code>拿掉xml以json取代,2013 了，再拿xml当default API就不是有一点的out了</p></li>
<li><p>JSR-353的参考实现<a href="https://java.net/projects/jsonp">JSON-P</a>将作为即将发布的JavaEE 7的一部分</p></li>
<li><p>以下代码演示JSONP的读写API</p>

<pre><code> import java.io.*;

 import javax.json.*;
 import javax.json.stream.*;
 import javax.json.stream.JsonParser.*;

 public class JsonDemo {
     private String address = "./json_demo.js";

     public static void main(String[] args) throws Exception {
         JsonDemo demo = new JsonDemo();
         demo.write();
         demo.read();
     }

     public void write() throws Exception{
         JsonBuilderFactory factory = Json.createBuilderFactory(null);
         JsonArray jsonArray = factory.createArrayBuilder()
             .add(factory.createObjectBuilder()
                 .add("username", "zhijia,.zhang")
                 .add("email", "jiahut@gmail.com"))
             .add(factory.createObjectBuilder()
                 .add("username", "lishi")
                 .add("email", "lishi@demo.com"))
             .build();
         try (JsonWriter jsonWriter = Json.createWriter(new FileWriter(address))) {
               jsonWriter.writeArray(jsonArray);
         }
     }

     public void read() throws Exception{
         JsonParserFactory factory = Json.createParserFactory(null);
         StringBuffer stb = new StringBuffer();
         String str = null;

         try(BufferedReader rd = new BufferedReader(new FileReader(address))){
             while((str = rd.readLine()) != null){
                 stb.append(str);
             }
         }

         JsonParser parser = factory.createParser(new StringReader(stb.toString()));
         while (parser.hasNext()) {
           Event event = parser.next();
           switch (event) {
             case KEY_NAME: {
               System.out.print(parser.getString() + "="); break;
             }
             case VALUE_STRING: {
               System.out.println(parser.getString()); break;
             }
           } // end switch
         }// end while
     }
 }
</code></pre></li>
<li><p>命令行下编译与运行</p>

<ul>
<li>请先<a href="https://java.net/projects/jsonp/downloads/download/ri/javax.json-ri-1.0-fab.zip">下载jsonp的jar</a>到当前目录</li>
<li><p>请使用java7或以上版本</p></li>
<li><p>编译 <code>javac -cp .;javax.json-1.0-fab.jar JsonDemo.java</code></p></li>
<li><p>运行 <code>java -cp .;javax.json-1.0-fab.jar JsonDemo</code></p></li>
<li><p>当然你也可以打开产生的json_demo.js 文件看看生成的内容</p></li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use git impove process from coding to testing]]></title>
    <link href="http://jiahut.github.com/blog/2013/03/19/use-git-impove-process-from-coding-to-testing/"/>
    <updated>2013-03-19T22:51:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2013/03/19/use-git-impove-process-from-coding-to-testing</id>
    <content type="html"><![CDATA[<h2>使用git改善代码编写与测试的过程</h2>

<ol>
<li><p>挂载待测试代码目录，这要得益于git原生支持共享文件系统</p>

<ul>
<li>win

<ul>
<li>&lt;HOST> <code>net share project_1=e:\projects\rails  /grant:administrator,full</code>

<ul>
<li> 如果文件夹路径中包含空格，需用括号包含起来</li>
<li>&lt;HOST> <code>net share project_1 /del</code></li>
</ul>
</li>
<li>&lt;GUEST> <code>net use z: \\&lt;HOST&gt;\project_1</code>

<ul>
<li>&lt;GUEST> <code>net use z: /del</code></li>
</ul>
</li>
</ul>
</li>
<li>linux

<ul>
<li>mount</li>
<li>使用ssh是更好的方案</li>
</ul>
</li>
</ul>
</li>
<li><p>fork一份拷贝,checkout到bugXXX分支作修正</p>

<ul>
<li>&lt;GUEST> <code>git clone z: project_1</code></li>
<li>&lt;GUEST> <code>git branch bugXX</code></li>
<li>&lt;GUEST> <code>git checkout bugXX</code></li>
</ul>
</li>
<li><p>push你的修正</p>

<ul>
<li><p>如果你直接推送到master会报错，下面方法可以解决，但是最好不要这样做
&lt;HOST> <code>git config --add receive.denyCurrentBranch warn</code></p>

<ul>
<li>or &lt;HOST> <code>git config --add receive.denyCurrentBranch ignore</code></li>
<li><p>or &lt;HOST> <code>git config -e</code> or <code>vim .git\config</code> append bellow config</p>

<pre><code>  [receive]  
  denyCurrentBranch = warn
</code></pre></li>
</ul>
</li>
<li><p>&lt;GUEST> <code>git push origin bugXX</code></p>

<ul>
<li>推送之前，请确保请确保HOST的工作树不处于你正推送的分支上，否则会遇见上面中提到的问题</li>
<li>一个简化的模型是，HOST始终在master分支，GUEST始终在你修正的分支中推送补丁(ps 你不应该推送你已经合并的分支)，然后HOST中去应用你的补丁</li>
</ul>
</li>
</ul>
</li>
<li>应用你的补丁

<ul>
<li>&lt;HOST> <code>git merge bugXX</code> or <code>git rebase bugXX</code></li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript core]]></title>
    <link href="http://jiahut.github.com/blog/2013/03/03/javascript-core/"/>
    <updated>2013-03-03T13:27:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2013/03/03/javascript-core</id>
    <content type="html"><![CDATA[<h2>javascript核心</h2>

<ol>
<li><p>两个作用域</p>

<ul>
<li>全局作用域</li>
<li><p>闭包作用域</p>

<pre><code>  for(var i = 1;i &lt; 100;i++); i逃逸到全局作用域中  
  console.log(i); //100
</code></pre></li>
</ul>
</li>
<li><p>两条原型链</p>

<ul>
<li>&lt;function>.prototype</li>
<li>&lt;object>.constructor</li>
</ul>
</li>
<li><p>两个上下文</p>

<ul>
<li>定义上下文</li>
<li><p>执行上下文</p>

<pre><code>  (function(){
      var callbacks = [];
      for(var i = 1;i &lt; 100;i++){
          callbacks.push(function(){
              console.log(i)
          });
      }
      callbacks.forEach(function(e){
          e.apply()
      });
  })()
</code></pre></li>
</ul>
</li>
<li><p>两套类型系统</p>

<ul>
<li>基本类型系统空的概念用 undefined 表示</li>
<li><p>对象类型系统空的概念用 null 表示</p>

<pre><code>   var str = ""  
   typeof str === 'string' //true  
   str instanceof String // false 
</code></pre></li>
</ul>
</li>
<li><p>两个核心概念</p>

<ul>
<li>闭包就是携带部分上下文的函数对象

<ul>
<li>内部函数中的变量优先在闭包中执行变量查找，然后上一次&#8230;</li>
</ul>
</li>
<li>上下文对象就是函数执行的环境

<ul>
<li>当前上下文为this</li>
<li>浏览器全局上下文为windows</li>
<li>nodejs全局上下文为global</li>
</ul>
</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby as script in action]]></title>
    <link href="http://jiahut.github.com/blog/2012/12/05/ruby-as-script-in-action/"/>
    <updated>2012-12-05T22:14:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2012/12/05/ruby-as-script-in-action</id>
    <content type="html"><![CDATA[<h3>基于ruby脚本的一些最佳实践</h3>

<ol>
<li><p>入口</p>

<ul>
<li>可选：拥有一个main.rb 文件，作为项目的入口文件</li>
<li><p>执行起点：</p>

<pre><code>  if __FILE__ == $0 # alias $PROGRAM_NAME
    # main point
  end
</code></pre></li>
</ul>
</li>
<li><p>加载路径</p>

<ul>
<li><p>将当前路径加入ruby的load_path中,以便查找到下面的模块或模型</p>

<pre><code>  $LOAD_PATH.unshift(File.join(File.dirname(__FILE__))) 
    unless $LOAD_PATH.include?(File.join(File.dirname(__FILE__)))
</code></pre></li>
</ul>
</li>
<li><p>配置文件</p>

<ul>
<li><p>使用ymal作为配置文件,使用<code>yaml</code>模块来读取</p>

<pre><code>  config = YAML.load_file(File.join(File.dirname(__FILE__), CONFIG_FILE))
</code></pre></li>
</ul>
</li>
<li><p>命令行参数</p>

<ul>
<li><p>使用<code>optparse</code>模块处理命令行参数</p>

<pre><code>   OptionParser.new do |opts|
        # options[:action] = args
        opts.on("--open [project_name]","open a sublime projec") do |project_info|
          options[:open] = project_info
        end

        opts.on_tail("-h", "--help", "Show this message") do
          puts opts
          exit
        end
    end.parse!


    options.each do |action , argv|
      SublProject.send action.to_sym,*argv
    end
</code></pre></li>
</ul>
</li>
<li><p>模块</p>

<ul>
<li>一个模块只应该解决一个核心问题。比如解析特定格式的文件，返回解析后的模型数据

<ul>
<li>可选： 以功能命名相应的文件夹，如parser</li>
</ul>
</li>
<li>模块的接口设计为返回一个模型的实例</li>
</ul>
</li>
<li><p>模型</p>

<ul>
<li>项目需求分析阶段，抽象出的核心概念都应该作为一个模型</li>
<li>模型应该采用rails的充血模型设计，模型之间能导航，但不需持久化</li>
<li>当代码在响应需求变化时显得复杂，这时候应该抽象出一个模型，在业务中插入一个对象来应对业务的变化。</li>
<li>可选：把所有模型保存到domain或models文件夹中</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python module vs. package]]></title>
    <link href="http://jiahut.github.com/blog/2012/10/28/python-module-vs-package/"/>
    <updated>2012-10-28T10:47:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2012/10/28/python-module-vs-package</id>
    <content type="html"><![CDATA[<h2>模块 vs. 包</h2>

<ol>
<li>一个.py文件就是一个模块，但是一个模块未必就对应一个.py文件

<ol>
<li>in lib/os.py it injects &#8220;sys.modules[&#8216;os.path&#8217;] = path&#8221; so that you&#8217;re able to do &#8220;import os.path&#8221; as though it was a submodule.</li>
<li>sys.modules is a dict in which modules are cached. When you import a module, if it already has been imported somewhere, it gets the instance stored in sys.modules.</li>
</ol>
</li>
<li>包就是一个文件夹下放一个 &#8220;_<em>init_</em>.py&#8221;

<ol>
<li>The _init.py files are required to make Python treat the directories as containing packages.</li>
<li>_<em>init_</em>.py can just be an empty file, but it can also execute initialization code for the package or set the _<em>all_</em> variable</li>
<li>多级package _<em>init_</em>.py从顶至底依次被执行</li>
</ol>
</li>
<li>import用于导入包或模块

<ol>
<li>A module&#8217;s body executes immediately the first time the module is imported in a given run of a program</li>
<li>An import statement creates a new namespace containing all the attributes of the module</li>
</ol>
</li>
</ol>


<h2>获取帮助</h2>

<ol>
<li>dir(object) => 列出object的方法</li>
<li>help(object) => 列出object的文档<br/>
*object 可以是模块,类 或者 函数对象</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkDown Syntax]]></title>
    <link href="http://jiahut.github.com/blog/2012/09/21/markdown-syntax/"/>
    <updated>2012-09-21T21:59:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2012/09/21/markdown-syntax</id>
    <content type="html"><![CDATA[<h3>记录一下Markdown的语法要点</h3>

<hr />

<ul>
<li><p>MD的语法全部由标点符号所组成,一般语法格式为<strong>标点符号</strong>后加<em>一个空格</em></p></li>
<li><p>与HTML之间</p>

<ul>
<li>不在Markdown涵盖范围之外的标签，都可以直接在文件里面用HTML撰写</li>
<li>只有<strong>区块元素</strong>──比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>标签，必需在前后加上空白</li>
<li>HTML的<strong>区段标签</strong>如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>则不受限制</li>
<li>Markdown语法在HTML<strong>区块标签</strong>中将不会被进行处理</li>
</ul>
</li>
<li><p>不要用tab,或者把tab设置为4个空格</p></li>
<li><p>行尾两个空格产生换行</p></li>
<li><p>缩进产生代码块，并结束于空行</p></li>
<li><p>如用到语法中的标点符号的时前面加反斜杠转义“/”</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress key point]]></title>
    <link href="http://jiahut.github.com/blog/2011/07/20/octopress-key-point/"/>
    <updated>2011-07-20T23:09:00+08:00</updated>
    <id>http://jiahut.github.com/blog/2011/07/20/octopress-key-point</id>
    <content type="html"><![CDATA[<h2>使用octopress的一下关键性要点</h2>

<ul>
<li><p>执行bundle绑定rake版本</p>

<ul>
<li>bundle exec rake new_post[&#8216;title&#8217;]

<ul>
<li>title里大可以包含空格</li>
</ul>
</li>
</ul>
</li>
<li><p>本地review</p>

<ul>
<li>bundle exec rake preview</li>
</ul>
</li>
<li><p>生成与提交</p>

<ul>
<li><p>bundle exec rake generate</p></li>
<li><p>bundle exec rake deploy</p></li>
</ul>
</li>
<li><p>创建文章别忘记备份源文件</p>

<ul>
<li><p>git add  source/_post/new_post</p></li>
<li><p>git commit -m &#8220;update source : new_post&#8221;</p></li>
</ul>
</li>
<li><p><strong>win</strong>下deploy的一些关键性细节</p>

<ul>
<li><p>set LC_ALL=zh_CN.UTF-8</p>

<ul>
<li>多少次跌在这个坑里，win的默认使用gbk编码，同时console默认显示的也是gbk编码</li>
</ul>
</li>
<li><p>生成的markdown文件请务必保证是utf-8无bom编码</p>

<ul>
<li>又是一个坑.</li>
</ul>
</li>
</ul>
</li>
<li><p>更新系统享受新特性</p>

<ul>
<li>git pull octopress master</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
